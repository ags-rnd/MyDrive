package pt.tecnico.myDrive.domain;

class FileSystem {
  Integer IdCounter;
}

class Login {
  DateTime ExpirationDate;
  Long Token;
}

class EnvironmentVariable {
  String Name;
  String Value;
}

class User {
  String Username;
  String Password;
  String Name;
  String Umask;
}

class RootUser extends User;

class GuestUser extends User;

class File {
  String Name;
  Integer Id;
  DateTime LastModified;
  String UserPermission;
  String OthersPermission;
}

class PlainFile extends File {
  String Data;
}

class Directory extends File;

class RootDirectory extends Directory;

class Link extends PlainFile{
	boolean DirtyBit;
}

class App extends PlainFile;

class Extension{
  String name;
}

relation DomainRootHasFileSystem {
  .pt.ist.fenixframework.DomainRoot playsRole Root {
    multiplicity 0..1;
  }
  FileSystem playsRole FileSystem {
    multiplicity 0..1;
  }
}

relation FileSystemContainsUsers {
  FileSystem playsRole FileSystem;
  User playsRole Users {
    multiplicity 1..*;
  }
}

relation FileSystemHasRootUser {
  FileSystem playsRole;
  RootUser playsRole RootUser {
    multiplicity 1;
  }
}

relation FileSystemHasGuestUser {
  FileSystem playsRole;
  GuestUser playsRole GuestUser {
    multiplicity 1;
  }
}

relation FileSystemContainsFiles {
  FileSystem playsRole FileSystem;
  File playsRole Files {
    multiplicity 1..*;
  }
}

relation FileSystemHasRootDirectory {
  FileSystem playsRole;
  RootDirectory playsRole RootDirectory {
    multiplicity 1;
  }
}

relation FileSystemContainsLogins {
  FileSystem playsRole FileSystem;
  Login playsRole Logins {
    multiplicity 0..*;
  }
}

relation LoginContainsEnvironmentVariables {
  Login playsRole Login;
  EnvironmentVariable playsRole EnvVar {
    multiplicity 0..*;
  }
}

relation LoginHasUser {
  Login playsRole;
  User playsRole User {
    multiplicity 1;
  }
}

relation LoginHasCurrentDirectory {
  Login playsRole;
  Directory playsRole CurrentDirectory {
    multiplicity 1;
  }
}

relation UserHasHomeDirectory {
  User playsRole User;
  Directory playsRole HomeDirectory {
    multiplicity 1;
  }
}

relation FileHasOwner {
  File playsRole;
  User playsRole Owner {
		multiplicity 1;
	}
}

relation DirectoryContainsFiles {
  Directory playsRole Parent;
  File playsRole File {
    multiplicity *;
  }
}

relation FileHasAnExtension{
    File playsRole file;
    Extension playsRole fileExtension{
        multiplicity 0..1;
     }
}    

relation UserHasExtensions{
    User playsRole user;
    Extension playsRole userExtension{
        multiplicity *;
    }
}

relation ExtensionHasAnApp{
    Extension playsRole extension;
    App playsRole app{
        multiplicity 0..1;
    }
}
