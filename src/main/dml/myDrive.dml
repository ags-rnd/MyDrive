package pt.tecnico.myDrive.domain;

class FileSystem {
  Integer idCounter;
}

class Login {
  DateTime expirationDate;
  Long token;
}

class EnvironmentVariable {
  String name;
  String value;
}

class User {
  String username;
  String password;
  String name;
  String umask;
}

class RootUser extends User;

class File {
  String name;
  Integer id;
  DateTime lastModified;
  String userPermission;
  String othersPermission;
}

class PlainFile extends File {
  String data;
}

class Directory extends File;

class RootDirectory extends Directory;

class Link extends PlainFile{
	boolean dirtyBit;
}

class App extends PlainFile;

class Extension{
  String name;
}

relation DomainRootHasFileSystem {
  .pt.ist.fenixframework.DomainRoot playsRole root {
    multiplicity 0..1;
  }
  FileSystem playsRole fileSystem {
    multiplicity 0..1;
  }
}

relation FileSystemContainsUsers {
  FileSystem playsRole fileSystem;
  User playsRole users {
    multiplicity 1..*;
  }
}

relation FileSystemHasRootUser {
  FileSystem playsRole;
  RootUser playsRole rootUser {
    multiplicity 1;
  }
}

relation FileSystemContainsFiles {
  FileSystem playsRole fileSystem;
  File playsRole files {
    multiplicity 1..*;
  }
}

relation FileSystemHasRootDirectory {
  FileSystem playsRole;
  RootDirectory playsRole rootDirectory {
    multiplicity 1;
  }
}

relation FileSystemContainsLogins {
  FileSystem playsRole fileSystem;
  Login playsRole logins {
    multiplicity 0..*;
  }
}

relation LoginContainsEnvironmentVariables {
  Login playsRole login;
  EnvironmentVariable playsRole envVar {
    multiplicity 0..*;
  }
}

relation LoginHasUser {
  Login playsRole;
  User playsRole user {
    multiplicity 1;
  }
}

relation LoginHasCurrentDirectory {
  Login playsRole;
  Directory playsRole currentDirectory {
    multiplicity 1;
  }
}

relation UserHasHomeDirectory {
  User playsRole user;
  Directory playsRole homeDirectory {
    multiplicity 1;
  }
}

relation FileHasOwner {
  File playsRole;
  User playsRole owner {
		multiplicity 1;
	}
}

relation DirectoryContainsFiles {
  Directory playsRole parent;
  File playsRole file {
    multiplicity *;
  }
}

relation FileHasAnExtension{
    File playsRole file;
    Extension playsRole fileExtension{
        multiplicity 0..1;
     }
}    

relation UserHasExtensions{
    User playsRole user;
    Extension playsRole userExtension{
        multiplicity *;
    }
}

relation ExtensionHasAnApp{
    Extension playsRole extension;
    App playsRole app{
        multiplicity 0..1;
    }
}
